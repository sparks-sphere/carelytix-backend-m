generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(uuid()) @map("id")
  email            String            @unique @map("email_id")
  password         String?
  name             String?
  primaryContactNo String?           @map("primary_contact_no")
  userMeta         Json?             @map("user_meta")
  isVerified       Boolean           @default(false) @map("is_verified")
  saloons          Saloon[]
  staff            Staff?
  planMappings     UserPlanMapping[]
  refreshTokens    RefreshToken[]
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")

  @@map("users")
}

model RefreshToken {
  id        String    @id @default(uuid())
  userId    String    @map("user_id")
  token     String    @unique
  expiresAt DateTime  @map("expires_at")
  ipAddress String?   @map("ip_address")
  userAgent String?   @map("user_agent")
  revokedAt DateTime? @map("revoked_at")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now()) @map("created_at")

  @@map("refresh_tokens")
}

model Plan {
  id             String              @id @default(uuid())
  name           String
  planMeta       Json?               @map("plan_meta")
  userMappings   UserPlanMapping[]
  moduleMappings PlanModuleMapping[]
  createdAt      DateTime            @default(now()) @map("created_at")
  updatedAt      DateTime            @updatedAt @map("updated_at")

  @@map("plans")
}

model Module {
  id              String                 @id @default(uuid())
  name            String
  moduleMeta      Json?                  @map("module_meta")
  createdAt       DateTime               @default(now()) @map("created_at")
  updatedAt       DateTime               @updatedAt @map("updated_at")
  planMappings    PlanModuleMapping[]
  featureMappings ModuleFeatureMapping[]

  @@map("modules")
}

model Feature {
  id             String                 @id @default(uuid())
  name           String
  featureMeta    Json?                  @map("feature_meta")
  moduleMappings ModuleFeatureMapping[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("features")
}

model UserPlanMapping {
  id        String   @id @default(uuid())
  isActive  Boolean  @default(true) @map("is_active")
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  planId    String   @map("plan_id")
  plan      Plan     @relation(fields: [planId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("user_plan_mapping")
}

model PlanModuleMapping {
  id       String  @id @default(uuid())
  isActive Boolean @default(true) @map("is_active")

  planId    String   @map("plan_id")
  plan      Plan     @relation(fields: [planId], references: [id], onDelete: Cascade)
  moduleId  String   @map("module_id")
  module    Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("plan_module_mapping")
}

model ModuleFeatureMapping {
  id        String   @id @default(uuid())
  isActive  Boolean  @default(true) @map("is_active")
  moduleId  String   @map("module_id")
  module    Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  featureId String   @map("feature_id")
  feature   Feature  @relation(fields: [featureId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("module_feature_mapping")
}

model Saloon {
  id      String @id @default(uuid())
  name    String
  ownerId String @map("owner_id")
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  branches  Branch[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("saloons")
}

model Branch {
  id             String          @id @default(uuid())
  branchCode     String
  name           String
  address        String?
  city           String?
  pincode        String?
  contactNo      String?         @map("contact_no")
  type           BranchType      @default(branch)
  saloonId       String          @map("saloon_id")
  saloon         Saloon          @relation(fields: [saloonId], references: [id], onDelete: Cascade)
  staff          Staff[]
  services       Service[]
  customers      Customer[]
  availableSlots AvailableSlot[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("branches")
}

model Staff {
  id             String          @id @default(uuid())
  name           String
  contactNumber  String
  address        String?
  role           StaffRole
  userId         String          @unique @map("user_id")
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  branchId       String          @map("branch_id")
  branch         Branch          @relation(fields: [branchId], references: [id], onDelete: Cascade)
  availableSlots AvailableSlot[]

  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("staff")
}

model Service {
  id              String  @id @default(uuid())
  name            String
  description     String?
  price           Decimal
  durationMinutes Int?    @map("duration_minutes")
  branchId        String  @map("branch_id")
  branch          Branch  @relation(fields: [branchId], references: [id], onDelete: Cascade)

  updatedAt             DateTime                @updatedAt @map("updated_at")
  Booking               Booking[]
  ServiceProductMapping ServiceProductMapping[]

  @@map("services")
}

model Customer {
  id       String  @id @default(uuid())
  name     String
  mobile   String
  email    String?
  place    String?
  branchId String  @map("branch_id")
  branch   Branch  @relation(fields: [branchId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  Booking   Booking[]
  Review    Review[]

  @@map("customers")
}

model AvailableSlot {
  id          String   @id @default(uuid())
  slotStart   DateTime @map("slot_start")
  slotEnd     DateTime @map("slot_end")
  isAvailable Boolean  @default(true) @map("is_available")
  branchId    String   @map("branch_id")
  branch      Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade)
  staffId     String?  @map("staff_id")
  staff       Staff?   @relation(fields: [staffId], references: [id], onDelete: SetNull)

  updatedAt DateTime @updatedAt @map("updated_at")
  Booking   Booking?

  @@map("available_slots")
}

model Booking {
  id          String        @id @default(uuid())
  status      BookingStatus @default(upcoming)
  notes       String?
  rescheduled Boolean       @default(false)
  slotId      String        @unique @map("slot_id")
  slot        AvailableSlot @relation(fields: [slotId], references: [id], onDelete: Cascade)
  customerId  String        @map("customer_id")
  customer    Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  serviceId   String?       @map("service_id")
  service     Service?      @relation(fields: [serviceId], references: [id], onDelete: SetNull)
  review      Review?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("bookings")
}

model Product {
  id              String                  @id @default(uuid())
  productId       String                  @unique @map("product_id")
  name            String
  description     String?
  price           Decimal
  manufacturer    String?
  expiry          DateTime?
  status          ProductStatus           @default(available)
  createdAt       DateTime                @default(now()) @map("created_at")
  updatedAt       DateTime                @updatedAt @map("updated_at")
  serviceMappings ServiceProductMapping[]

  @@map("product")
}

model ServiceProductMapping {
  id     String        @id @default(uuid())
  status MappingStatus @default(active)

  serviceId String  @map("service_id")
  service   Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  productId String  @map("product_id")
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("service_product_mapping")
}

model Review {
  id         String   @id @default(uuid())
  rating     Int
  comments   String?
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  bookingId  String   @unique @map("booking_id")
  booking    Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  customerId String   @map("customer_id")
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Member {
  id               String  @id @default(uuid())
  email            String  @unique @map("email_id")
  password         String
  name             String?
  primaryContactNo String? @map("primary_contact_no")
  memberMeta       Json?   @map("members_meta")
  isActive         Boolean @default(true) @map("is_active")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("members")
}

enum BranchType {
  main
  branch
}

enum StaffRole {
  head_of_operation
  stylist
  manicurist
  make_up_artist
  floor_manager
  spa_staff
  cleaning_staff
}

enum BookingStatus {
  upcoming
  ongoing
  done
}

enum ProductStatus {
  available
  not_available
  discontinued
  draft
}

enum MappingStatus {
  active
  removed
}
